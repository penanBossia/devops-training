name: 'devops'

services:
  javadb:
    image: postgres:14.12-alpine
    restart: always
    container_name: javadb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - network

  nodedb:
    image: postgres:14.12-alpine
    container_name: nodedb
    ports:
      - "5436:5436"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_PORT=5436
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - network

  mongodb:
    image: mongo:7.0.11
    container_name: mongodb
    ports:
      - "27017:27017"
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongodb
      MONGO_INITDB_ROOT_PASSWORD: mongodb
      MONGO_INITDB_DATABASE: pythondb
    healthcheck:
      test: mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - ./pythonapp/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - network

  javaapi:
    container_name: javaapp
    image: pbossia/devops-javaapi:1.0.0
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://javadb/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    depends_on:
      javadb:
        condition: service_healthy
    healthcheck:
      test: curl http://localhost:8080/
      interval: 40s
      timeout: 40s
      retries: 5
      start_period: 40s
    networks:
      - network

  pythonapi:
    container_name: pythonapp
    image: pbossia/devops-pythonapi:1.0.0
    ports:
      - "8082:5000"
    environment:
      FLASK_APP: app.py
      FLASK_RUN_HOST: 0.0.0.0
      ENVIRONMENT: prod
      DATABASE_HOST: mongodb
      DATABASE_PORT: 27017
      DATABASE_USERNAME: mongodb
      DATABASE_PASSWORD: mongodb
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: curl http://localhost:5000/api
      interval: 40s
      timeout: 40s
      retries: 5
      start_period: 40s
    networks:
      - network

  nodeapi:
    container_name: nodeapp
    image: pbossia/devops-nodeapi:1.0.0
    ports:
      - "3000:3000"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_HOST=nodedb
      - POSTGRES_PORT=5436
      #- NODE_ENV=qua
    depends_on:
      nodedb:
        condition: service_healthy
    healthcheck:
      test: curl http://localhost:3000/api/v1/health
      interval: 40s
      timeout: 40s
      retries: 5
      start_period: 40s
    networks:
      - network

  reactui:
    container_name: reactui
    image: pbossia/devops-reactui:1.0.0
    ports:
      - "8083:80"
    depends_on:
      javaapi:
        condition: service_healthy
      pythonapi:
        condition: service_healthy
      nodeapi:
        condition: service_healthy
    healthcheck:
      test: curl http://localhost
      interval: 40s
      timeout: 40s
      retries: 5
      start_period: 40s
    networks:
      - network

  ngui:
    container_name: ngui
    image: pbossia/devops-ngui:1.0.0
    ports:
      - "8084:80"
    depends_on:
      javaapi:
        condition: service_healthy
      pythonapi:
        condition: service_healthy
      nodeapi:
        condition: service_healthy
    healthcheck:
      test: curl http://localhost
      interval: 40s
      timeout: 40s
      retries: 5
      start_period: 40s
    networks:
      - network

  rp:
    image: nginx:1.27.0-alpine
    container_name: rp
    ports:
      - "80:80"
    depends_on:
      ngui:
        condition: service_healthy
      reactui:
        condition: service_healthy
    volumes:
      - ./rp/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - network

networks:
  network:
    driver: bridge