name: 'devops'

services:
  postgresdb:
    image: postgres:14.12-alpine
    restart: always
    container_name: postgresdb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - network
  
  mongodb:
    image: mongo:7.0.11
    container_name: mongodb
    restart: always
    environment:
        MONGO_INITDB_ROOT_USERNAME: mongodb
        MONGO_INITDB_ROOT_PASSWORD: mongodb
        MONGO_INITDB_DATABASE: pythondb
    ports:
        - 27017:27017
    volumes:
        - ./pythonapp/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - network
  
  javaapi:
    container_name: javaapp
    build: ./javaapp
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresdb/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    depends_on:
      postgresdb:
        condition: service_healthy
    networks:
      - network

  pythonapi:
    container_name: pythonapp
    build: ./pythonapp
    environment:
      FLASK_APP: app.py
      FLASK_RUN_HOST: 0.0.0.0
      #FLASK_ENV: development
      ENVIRONMENT: prod
      DATABASE_HOST: mongodb
      DATABASE_PORT: 27017
      DATABASE_USERNAME: mongodb
      DATABASE_PASSWORD: mongodb
    ports:
      - "8082:5000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - network
  
  reactui:
    container_name: reactapp
    build: ./ui-app
    environment:
      JAVA_API_URL: http://javaapp:8081/v1/
      PYTHON_API_URL: http://pythonapp:8082/
    networks:
      - network
    ports:
      - "8080:80"

networks:
  network:
    driver: bridge